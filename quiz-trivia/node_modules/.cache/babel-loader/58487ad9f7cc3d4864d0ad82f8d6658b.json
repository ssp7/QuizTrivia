{"ast":null,"code":"var _jsxFileName = \"/Users/student/Desktop/QuizTrivia/quiz-trivia/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport QuestionCard from \"./Components/QuestionCard\";\nimport { Difficulty } from \"./API\";\nimport { getTriviaQuestions } from \"./API\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const TOTAL_QUESTIONS = 10;\n  console.log(questions);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await getTriviaQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore(prev => prev + 1); //Save the answers in the user answer array\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, \"Quiz Trivia\", gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start\",\n    onClick: startQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Start Quiz\") : null, !gameOver ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 20\n    }\n  }, \"Score: \", score) : null, loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  }, \"Loading Questions.....\"), !loading && !gameOver && /*#__PURE__*/React.createElement(QuestionCard, {\n    questionNumber: number + 1,\n    totalQuestions: TOTAL_QUESTIONS,\n    question: questions[number].question,\n    answers: questions[number].answers,\n    userAnswer: userAnswers ? userAnswers[number] : undefined,\n    callback: checkAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), !loading && !gameOver && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"next\",\n    onClick: nextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Next\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/student/Desktop/QuizTrivia/quiz-trivia/src/App.tsx"],"names":["React","useState","QuestionCard","Difficulty","getTriviaQuestions","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","TOTAL_QUESTIONS","console","log","startQuiz","newQuestions","EASY","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport QuestionCard from \"./Components/QuestionCard\";\nimport { Difficulty, QuestionState } from \"./API\";\nimport { getTriviaQuestions } from \"./API\";\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const TOTAL_QUESTIONS = 10;\n\n  console.log(questions);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await getTriviaQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore((prev) => prev + 1);\n\n      //Save the answers in the user answer array\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion)\n    }\n  };\n  return (\n    <div className=\"App\">\n      Quiz Trivia\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startQuiz}>\n          Start Quiz\n        </button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      {loading && <p>Loading Questions.....</p>}\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNumber={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!loading &&\n        !gameOver &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS && (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next\n          </button>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}